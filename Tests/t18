(module
    (import "host" "exit" (func $exit))
    (import "host" "putchar" (func $putchar (param i32)))
    (import "host" "getchar" (func $getchar (result i32)))
    (func $calculator
        call  $init
        call  $parser
    )
    (global $_havechar (mut i32) (i32.const 0) )
    (global $_char (mut i32) (i32.const 0) )
    (func $getc (result i32)
        (if
            (block (result i32)
                global.get $_havechar
            )
            (then 
                i32.const 0
                global.set $_havechar
                global.get $_char
                return
            )
        )
        call  $getchar
        return
    (i32.const 12345))
    (func $ungetc (param $ch i32)
        (if
            (block (result i32)
                global.get $_havechar
            )
            (then 
                i32.const 100
                i32.const 133
                call  $prints
                call  $halt
                unreachable
            )
        )
        i32.const 1
        global.set $_havechar
        local.get $ch
        global.set $_char
    )
    (global $_havetoken (mut i32) (i32.const 0) )
    (global $_token (mut i32) (i32.const 0) )
    (global $attr (mut i32) (i32.const 0) )
    (func $peek (result i32)
        (if
            (block (result i32)
                global.get $_havetoken
            )
            (then 
                global.get $_token
                return
            )
        )
        i32.const 1
        global.set $_havetoken
        call  $scanner
        global.set $_token
        global.get $_token
        return
    (i32.const 12345))
    (func $match (param $expect i32)
        (if
            (block (result i32)
                call  $peek
                local.get $expect
                i32.ne
            )
            (then 
                i32.const 133
                i32.const 149
                call  $prints
                local.get $expect
                call  $printc
                i32.const 149
                i32.const 150
                call  $prints
                call  $halt
                unreachable
            )
        )
        i32.const 0
        global.set $_havetoken
    )
    (func $scanner (result i32) (local $ch i32)
        (block $L3
            (loop $L2
                
                    call  $getc
                    local.set $ch
                    local.get $ch
                    call  $isspace
                
                i32.eqz 
                br_if $L3
                    br $L2
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $EOF
                    i32.eq
                )
                (then 
                    global.get $TK_EOF
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_NL
                    i32.eq
                )
                (then 
                    global.get $TK_EOLN
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_PLUS
                    i32.eq
                )
                (then 
                    global.get $TK_ADD
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_MINUS
                    i32.eq
                )
                (then 
                    global.get $TK_SUB
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_STAR
                    i32.eq
                )
                (then 
                    global.get $TK_MUL
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_SLASH
                    i32.eq
                )
                (then 
                    global.get $TK_DIV
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_LPAREN
                    i32.eq
                )
                (then 
                    global.get $TK_LPAREN
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    global.get $ASCII_RPAREN
                    i32.eq
                )
                (then 
                    global.get $TK_RPAREN
                    return
                )
            )
            (if
                (block (result i32)
                    local.get $ch
                    call  $isdigit
                )
                (then 
                    i32.const 0
                    global.set $attr
                    (block $L3
                        (loop $L2
                            
                                local.get $ch
                                call  $isdigit
                            
                            i32.eqz 
                            br_if $L3
                                global.get $attr
                                i32.const 10
                                i32.mul
                                local.get $ch
                                global.get $ASCII_0
                                i32.sub
                                i32.add
                                global.set $attr
                                call  $getc
                                local.set $ch
                                br $L2
                            )
                        )
                        local.get $ch
                        call  $ungetc
                        global.get $TK_NUMBER
                        return
                    )
                )
                i32.const 150
                i32.const 176
                call  $prints
                call  $halt
                unreachable
            (i32.const 12345))
            (func $isdigit (param $ch i32) (result i32)
                local.get $ch
                global.get $ASCII_0
                i32.ge_s
                local.get $ch
                global.get $ASCII_9
                i32.le_s
                i32.and
                return
            (i32.const 12345))
            (func $isspace (param $ch i32) (result i32)
                local.get $ch
                global.get $ASCII_SPACE
                i32.eq
                local.get $ch
                global.get $ASCII_TAB
                i32.eq
                i32.or
                local.get $ch
                global.get $ASCII_CR
                i32.eq
                i32.or
                return
            (i32.const 12345))
            (func $parser (local $result i32)
                (block $L3
                    (loop $L2
                        
                            call  $peek
                            global.get $TK_EOF
                            i32.ne
                        
                        i32.eqz 
                        br_if $L3
                            call  $E
                            local.set $result
                            global.get $TK_EOLN
                            call  $match
                            i32.const 176
                            i32.const 179
                            call  $prints
                            local.get $result
                            call  $printi
                            i32.const 179
                            i32.const 180
                            call  $prints
                            br $L2
                        )
                    )
                )
                (func $E (result i32) (local $l i32) (local $r i32) (local $token i32)
                    call  $T
                    local.set $l
                    (block $L3
                        (loop $L2
                            
                                call  $peek
                                global.get $TK_ADD
                                i32.eq
                                call  $peek
                                global.get $TK_SUB
                                i32.eq
                                i32.or
                            
                            i32.eqz 
                            br_if $L3
                                call  $peek
                                local.set $token
                                local.get $token
                                call  $match
                                call  $T
                                local.set $r
                                (if
                                    (block (result i32)
                                        local.get $token
                                        global.get $TK_ADD
                                        i32.eq
                                    )
                                    (then 
                                        local.get $l
                                        local.get $r
                                        i32.add
                                        local.set $l
                                    )
                                    (else 
                                        local.get $l
                                        local.get $r
                                        i32.sub
                                        local.set $l
                                    )
                                )
                                br $L2
                            )
                        )
                        local.get $l
                        return
                    (i32.const 12345))
                    (func $T (result i32) (local $l i32) (local $r i32) (local $token i32)
                        call  $F
                        local.set $l
                        (block $L3
                            (loop $L2
                                
                                    call  $peek
                                    global.get $TK_MUL
                                    i32.eq
                                    call  $peek
                                    global.get $TK_DIV
                                    i32.eq
                                    i32.or
                                
                                i32.eqz 
                                br_if $L3
                                    call  $peek
                                    local.set $token
                                    local.get $token
                                    call  $match
                                    call  $F
                                    local.set $r
                                    (if
                                        (block (result i32)
                                            local.get $token
                                            global.get $TK_MUL
                                            i32.eq
                                        )
                                        (then 
                                            local.get $l
                                            local.get $r
                                            i32.mul
                                            local.set $l
                                        )
                                        (else 
                                            local.get $l
                                            local.get $r
                                            i32.div_s
                                            local.set $l
                                        )
                                    )
                                    br $L2
                                )
                            )
                            local.get $l
                            return
                        (i32.const 12345))
                        (func $F (result i32) (local $result i32) (local $token i32)
                            call  $peek
                            local.set $token
                            (if
                                (block (result i32)
                                    local.get $token
                                    global.get $TK_LPAREN
                                    i32.eq
                                )
                                (then 
                                    global.get $TK_LPAREN
                                    call  $match
                                    call  $E
                                    local.set $result
                                    global.get $TK_RPAREN
                                    call  $match
                                )
                                (else 
                                    (if
                                        (block (result i32)
                                            local.get $token
                                            global.get $TK_SUB
                                            i32.eq
                                        )
                                        (then 
                                            global.get $TK_SUB
                                            call  $match
                                            call  $F
                                            local.set $result
                                        )
                                        (else 
                                            (if
                                                (block (result i32)
                                                    local.get $token
                                                    global.get $TK_NUMBER
                                                    i32.eq
                                                )
                                                (then 
                                                    global.get $TK_NUMBER
                                                    call  $match
                                                    global.get $attr
                                                    local.set $result
                                                )
                                                (else 
                                                    i32.const 180
                                                    i32.const 204
                                                    call  $prints
                                                    call  $halt
                                                    unreachable
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            local.get $result
                            return
                        (i32.const 12345))
                        (global $EOF (mut i32) (i32.const 0) )
                        (global $TK_EOF (mut i32) (i32.const 0) )
                        (global $TK_EOLN (mut i32) (i32.const 0) )
                        (global $TK_NUMBER (mut i32) (i32.const 0) )
                        (global $TK_ADD (mut i32) (i32.const 0) )
                        (global $TK_SUB (mut i32) (i32.const 0) )
                        (global $TK_MUL (mut i32) (i32.const 0) )
                        (global $TK_DIV (mut i32) (i32.const 0) )
                        (global $TK_LPAREN (mut i32) (i32.const 0) )
                        (global $TK_RPAREN (mut i32) (i32.const 0) )
                        (global $ASCII_0 (mut i32) (i32.const 0) )
                        (global $ASCII_9 (mut i32) (i32.const 0) )
                        (global $ASCII_PLUS (mut i32) (i32.const 0) )
                        (global $ASCII_MINUS (mut i32) (i32.const 0) )
                        (global $ASCII_STAR (mut i32) (i32.const 0) )
                        (global $ASCII_SLASH (mut i32) (i32.const 0) )
                        (global $ASCII_LPAREN (mut i32) (i32.const 0) )
                        (global $ASCII_RPAREN (mut i32) (i32.const 0) )
                        (global $ASCII_SPACE (mut i32) (i32.const 0) )
                        (global $ASCII_TAB (mut i32) (i32.const 0) )
                        (global $ASCII_CR (mut i32) (i32.const 0) )
                        (global $ASCII_NL (mut i32) (i32.const 0) )
                        (func $init
                            i32.const -1
                            global.set $EOF
                            i32.const 48
                            global.set $ASCII_0
                            i32.const 57
                            global.set $ASCII_9
                            i32.const 43
                            global.set $ASCII_PLUS
                            i32.const 45
                            global.set $ASCII_MINUS
                            i32.const 42
                            global.set $ASCII_STAR
                            i32.const 47
                            global.set $ASCII_SLASH
                            i32.const 40
                            global.set $ASCII_LPAREN
                            i32.const 41
                            global.set $ASCII_RPAREN
                            i32.const 32
                            global.set $ASCII_SPACE
                            i32.const 9
                            global.set $ASCII_TAB
                            i32.const 13
                            global.set $ASCII_CR
                            i32.const 10
                            global.set $ASCII_NL
                            i32.const 256
                            global.set $TK_EOF
                            i32.const 257
                            global.set $TK_NUMBER
                            global.get $ASCII_PLUS
                            global.set $TK_ADD
                            global.get $ASCII_MINUS
                            global.set $TK_SUB
                            global.get $ASCII_STAR
                            global.set $TK_MUL
                            global.get $ASCII_SLASH
                            global.set $TK_DIV
                            global.get $ASCII_LPAREN
                            global.set $TK_LPAREN
                            global.get $ASCII_RPAREN
                            global.set $TK_RPAREN
                            global.get $ASCII_NL
                            global.set $TK_EOLN
                        )
                        (start $calculator)
;;
;;
;; RTS
;;
;;
  (func $add (param $lhs i32) (param $rhs i32) (result i32)
    local.get $lhs
    local.get $rhs	
    i32.add)

  (export "add" (func $add))
  
  (func $printc (param $p i32)
    local.get $p
	call $putchar)
  (export "printc" (func $printc))


  (func $db 
    i32.const 65
	call $putchar)
  (export "$db" (func $db))
	
  
  
  (func $printd (param $x i32)
    i32.const 48
    get_local $x
    i32.add
    call $putchar	
  )  
  (export "printd" (func $printd))
	


  (func $prints (param $x i32) (param $y i32)
   (if
    (i32.lt_s
     (get_local $x)
     (get_local $y)
    )
    (then	 
	 (get_local $x)
	 (i32.load)
	 (call $putchar)
     (get_local $x)
	 (i32.const 1)
	 (i32.add)
	 (get_local $y)
	 (call $prints)	 
    )    
   )
  )  
  (export "prints" (func $prints))
  
  
  

  
  (func $rint (param $x i32) (param $m i32) (result i32)
   (if (result i32)
    (i32.ne
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 
	  local.get $m
	  i32.const 10
	  i32.mul
	  local.set $m	 
	  
	  local.get $x
	  i32.const 10
	  i32.rem_s	  
	  local.get $m
	  i32.add 
	  local.set $m    
	  
	  local.get $x
	  i32.const 10
	  i32.div_s
      local.set $x 	
	  
	  local.get $x
	  local.get $m
	  call $rint		
	  
    )(else 
		local.get $m
	 )
   )
  )  
  (export "rint" (func $rint))
  
  (func $rprinti (param $x i32) (param $i i32) 
   (if
    (i32.ne
	  (get_local $i)
      (i32.const 0)      
    )
    (then	 	  	 
	
	  local.get $x
	  i32.const 10
	  i32.rem_u
	  call $printd	  
	  
	  local.get $x
	  i32.const 10
	  i32.div_u	  	
	  local.set $x

	  local.get $i
	  i32.const 1
	  i32.sub	  
	  local.set $i
	  
	  local.get $x
	  local.get $i	  
	  call $rprinti
    )
   )
  )  
  (export "rprinti" (func $rprinti))
  
  (func $getilen (param $x i32) (param $i i32) (result i32)
   (if (result i32)
    (i32.ne
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 	  	  	  	  
	  local.get $x
	  i32.const 10
	  i32.div_u	  	  
	  local.set $x
	  
	  local.get $i 
	  i32.const 1 
	  i32.add 
	  local.set $i	 
	  
	  local.get $x 
	  local.get $i 
	  
	  call $getilen
    )(else 
		local.get $i 
	)
   )
  )  
  (export "getilen" (func $getilen))
  
  
  (func $printi_nz (param $x i32) (param $l i32)
   (if
    (i32.lt_s
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 	
	
		local.get $x
		i32.const -1
		i32.mul
		local.set $x
		
		i32.const 45
		call $printc
	
	    local.get $x
		local.get $l
		call $getilen
		local.set $l
		
		
	
	

	  
	  local.get $x
	  i32.const 0
	  call $rint
	  local.get $l 
	  call $rprinti	  
    )
	(else
		local.get $x
		local.get $l
		call $getilen
		local.set $l
		


		local.get $x
		i32.const 0
		call $rint
		local.get $l 
		call $rprinti	
	)
   )
  )  
  (export "printi_nz" (func $printi_nz))
  
  
(func $printi_inrange (param $x i32)
   (if
    (i32.ne
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 
		local.get $x		
		i32.const 0 		
		(call $printi_nz)	   
    )
	(else
		i32.const 0 
		call $printd
	)
   )
  )  
  (export "printi_inrange" (func $printi_inrange))
  
  (func $printi (param $x i32)
   (if
    (i32.eq
	  (get_local $x)
      (i32.const -2147483648)      
    )
    (then	 
		i32.const 45
		call $printc
		i32.const 21474
        call  $printi
		i32.const 83648
        call  $printi
    )
	(else
		local.get $x		
		(call $printi_inrange)	   
		)
	)
)  
  (export "printi" (func $printi))
  
  
  
(func $printb (param $x i32)
   (if
    (i32.eq
	  (get_local $x)
	  (i32.const 1)     
    )
    (then	 
	 (i32.const 116)	 
	 (call $putchar) 
	 (i32.const 114)	 
	 (call $putchar) 
	 (i32.const 117)	 
	 (call $putchar) 
	 (i32.const 101)	 
	 (call $putchar) 
    )
	(else			
	 (i32.const 102)	 
	 (call $putchar) 
	 (i32.const 97)	 
	 (call $putchar) 
	 (i32.const 108)	 
	 (call $putchar) 
	 (i32.const 115)	 
	 (call $putchar) 
	 (i32.const 101)	 
	 (call $putchar) 
	)    
   )
  )   
  (export "printb" (func $printb))
  
  
  (func $halt     
	call $exit)
  (export "$halt" (func $halt))

(data 0 (i32.const 180) "\45\72\72\6f\72\3a\20\65\78\70\65\63\74\65\64\20\66\61\63\74\6f\72\2e\0a")
(data 0 (i32.const 179) "\0a")
(data 0 (i32.const 176) "\20\3d\20")
(data 0 (i32.const 150) "\45\72\72\6f\72\3a\20\69\6e\76\61\6c\69\64\20\63\68\61\72\61\63\74\65\72\2e\0a")
(data 0 (i32.const 149) "\0a")
(data 0 (i32.const 133) "\45\72\72\6f\72\3a\20\65\78\70\65\63\74\65\64\20")
(data 0 (i32.const 100) "\49\6e\74\65\72\6e\61\6c\20\65\72\72\6f\72\3a\20\74\6f\6f\20\6d\61\6e\79\20\75\6e\67\65\74\73\21\0a")


                    (memory 1)
                )