(module
    (import "host" "exit" (func $exit))
    (import "host" "putchar" (func $putchar (param i32)))
    (import "host" "getchar" (func $getchar (result i32)))
    (global $a (mut i32) (i32.const 0) )
    (global $b (mut i32) (i32.const 0) )
    (global $c (mut i32) (i32.const 0) )
    (func $A (result i32)
        i32.const 100
        i32.const 112
        call  $prints
        global.get $a
        return
    (i32.const 12345))
    (func $B (result i32)
        i32.const 112
        i32.const 124
        call  $prints
        global.get $b
        return
    (i32.const 12345))
    (func $C (result i32)
        i32.const 124
        i32.const 136
        call  $prints
        global.get $c
        return
    (i32.const 12345))
    (func $eval (param $newa i32) (param $n00b i32) (param $newc i32)
        local.get $newa
        global.set $a
        local.get $n00b
        global.set $b
        local.get $newc
        global.set $c
        i32.const 136
        i32.const 180
        call  $prints
        global.get $a
        call  $printb
        i32.const 180
        i32.const 183
        call  $prints
        global.get $b
        call  $printb
        i32.const 183
        i32.const 186
        call  $prints
        global.get $c
        call  $printb
        i32.const 186
        i32.const 187
        call  $prints
        (if
            (block (result i32)
                call  $A
                call  $B
                i32.and
                call  $C
                i32.or
            )
            (then 
                i32.const 187
                i32.const 204
                call  $prints
            )
            (else 
                i32.const 204
                i32.const 223
                call  $prints
            )
        )
    )
    (func $assign (param $newa i32) (param $newb i32) (param $newc i32) (local $x i32)
        local.get $newa
        global.set $a
        local.get $newb
        global.set $b
        local.get $newc
        global.set $c
        i32.const 223
        i32.const 250
        call  $prints
        global.get $a
        call  $printb
        i32.const 250
        i32.const 253
        call  $prints
        global.get $b
        call  $printb
        i32.const 253
        i32.const 256
        call  $prints
        global.get $c
        call  $printb
        i32.const 256
        i32.const 257
        call  $prints
        call  $A
        call  $B
        i32.const 1
        i32.xor
        i32.and
        call  $C
        i32.or
        local.set $x
        i32.const 257
        i32.const 259
        call  $prints
        local.get $x
        call  $printb
        i32.const 259
        i32.const 260
        call  $prints
    )
    (func $main
        i32.const 0
        i32.const 0
        i32.const 0
        call  $eval
        i32.const 260
        i32.const 261
        call  $prints
        i32.const 0
        i32.const 0
        i32.const 1
        call  $eval
        i32.const 261
        i32.const 262
        call  $prints
        i32.const 0
        i32.const 1
        i32.const 0
        call  $eval
        i32.const 262
        i32.const 263
        call  $prints
        i32.const 0
        i32.const 1
        i32.const 1
        call  $eval
        i32.const 263
        i32.const 264
        call  $prints
        i32.const 1
        i32.const 0
        i32.const 0
        call  $eval
        i32.const 264
        i32.const 265
        call  $prints
        i32.const 1
        i32.const 0
        i32.const 1
        call  $eval
        i32.const 265
        i32.const 266
        call  $prints
        i32.const 1
        i32.const 1
        i32.const 0
        call  $eval
        i32.const 266
        i32.const 267
        call  $prints
        i32.const 1
        i32.const 1
        i32.const 1
        call  $eval
        i32.const 267
        i32.const 268
        call  $prints
        i32.const 0
        i32.const 0
        i32.const 0
        call  $assign
        i32.const 268
        i32.const 269
        call  $prints
        i32.const 0
        i32.const 0
        i32.const 1
        call  $assign
        i32.const 269
        i32.const 270
        call  $prints
        i32.const 0
        i32.const 1
        i32.const 0
        call  $assign
        i32.const 270
        i32.const 271
        call  $prints
        i32.const 0
        i32.const 1
        i32.const 1
        call  $assign
        i32.const 271
        i32.const 272
        call  $prints
        i32.const 1
        i32.const 0
        i32.const 0
        call  $assign
        i32.const 272
        i32.const 273
        call  $prints
        i32.const 1
        i32.const 0
        i32.const 1
        call  $assign
        i32.const 273
        i32.const 274
        call  $prints
        i32.const 1
        i32.const 1
        i32.const 0
        call  $assign
        i32.const 274
        i32.const 275
        call  $prints
        i32.const 1
        i32.const 1
        i32.const 1
        call  $assign
    )
    (start $main)
;;
;;
;; RTS
;;
;;
  (func $add (param $lhs i32) (param $rhs i32) (result i32)
    local.get $lhs
    local.get $rhs	
    i32.add)

  (export "add" (func $add))
  
  (func $printc (param $p i32)
    local.get $p
	call $putchar)
  (export "printc" (func $printc))


  (func $db 
    i32.const 65
	call $putchar)
  (export "$db" (func $db))
	
  
  
  (func $printd (param $x i32)
    i32.const 48
    get_local $x
    i32.add
    call $putchar	
  )  
  (export "printd" (func $printd))
	


  (func $prints (param $x i32) (param $y i32)
   (if
    (i32.lt_s
     (get_local $x)
     (get_local $y)
    )
    (then	 
	 (get_local $x)
	 (i32.load)
	 (call $putchar)
     (get_local $x)
	 (i32.const 1)
	 (i32.add)
	 (get_local $y)
	 (call $prints)	 
    )    
   )
  )  
  (export "prints" (func $prints))
  
  
  

  
  (func $rint (param $x i32) (param $m i32) (result i32)
   (if (result i32)
    (i32.ne
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 
	  local.get $m
	  i32.const 10
	  i32.mul
	  local.set $m	 
	  
	  local.get $x
	  i32.const 10
	  i32.rem_s	  
	  local.get $m
	  i32.add 
	  local.set $m    
	  
	  local.get $x
	  i32.const 10
	  i32.div_s
      local.set $x 	
	  
	  local.get $x
	  local.get $m
	  call $rint		
	  
    )(else 
		local.get $m
	 )
   )
  )  
  (export "rint" (func $rint))
  
  (func $rprinti (param $x i32) (param $i i32) 
   (if
    (i32.ne
	  (get_local $i)
      (i32.const 0)      
    )
    (then	 	  	 
	
	  local.get $x
	  i32.const 10
	  i32.rem_u
	  call $printd	  
	  
	  local.get $x
	  i32.const 10
	  i32.div_u	  	
	  local.set $x

	  local.get $i
	  i32.const 1
	  i32.sub	  
	  local.set $i
	  
	  local.get $x
	  local.get $i	  
	  call $rprinti
    )
   )
  )  
  (export "rprinti" (func $rprinti))
  
  (func $getilen (param $x i32) (param $i i32) (result i32)
   (if (result i32)
    (i32.ne
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 	  	  	  	  
	  local.get $x
	  i32.const 10
	  i32.div_u	  	  
	  local.set $x
	  
	  local.get $i 
	  i32.const 1 
	  i32.add 
	  local.set $i	 
	  
	  local.get $x 
	  local.get $i 
	  
	  call $getilen
    )(else 
		local.get $i 
	)
   )
  )  
  (export "getilen" (func $getilen))
  
  
  (func $printi_nz (param $x i32) (param $l i32)
   (if
    (i32.lt_s
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 	
	
		local.get $x
		i32.const -1
		i32.mul
		local.set $x
		
		i32.const 45
		call $printc
	
	    local.get $x
		local.get $l
		call $getilen
		local.set $l
		
		
	
	

	  
	  local.get $x
	  i32.const 0
	  call $rint
	  local.get $l 
	  call $rprinti	  
    )
	(else
		local.get $x
		local.get $l
		call $getilen
		local.set $l
		


		local.get $x
		i32.const 0
		call $rint
		local.get $l 
		call $rprinti	
	)
   )
  )  
  (export "printi_nz" (func $printi_nz))
  
  
(func $printi_inrange (param $x i32)
   (if
    (i32.ne
	  (get_local $x)
      (i32.const 0)      
    )
    (then	 
		local.get $x		
		i32.const 0 		
		(call $printi_nz)	   
    )
	(else
		i32.const 0 
		call $printd
	)
   )
  )  
  (export "printi_inrange" (func $printi_inrange))
  
  (func $printi (param $x i32)
   (if
    (i32.eq
	  (get_local $x)
      (i32.const -2147483648)      
    )
    (then	 
		i32.const 45
		call $printc
		i32.const 21474
        call  $printi
		i32.const 83648
        call  $printi
    )
	(else
		local.get $x		
		(call $printi_inrange)	   
		)
	)
)  
  (export "printi" (func $printi))
  
  
  
(func $printb (param $x i32)
   (if
    (i32.eq
	  (get_local $x)
	  (i32.const 1)     
    )
    (then	 
	 (i32.const 116)	 
	 (call $putchar) 
	 (i32.const 114)	 
	 (call $putchar) 
	 (i32.const 117)	 
	 (call $putchar) 
	 (i32.const 101)	 
	 (call $putchar) 
    )
	(else			
	 (i32.const 102)	 
	 (call $putchar) 
	 (i32.const 97)	 
	 (call $putchar) 
	 (i32.const 108)	 
	 (call $putchar) 
	 (i32.const 115)	 
	 (call $putchar) 
	 (i32.const 101)	 
	 (call $putchar) 
	)    
   )
  )   
  (export "printb" (func $printb))
  
  
  (func $halt     
	call $exit)
  (export "$halt" (func $halt))

(data 0 (i32.const 274) "\0a")
(data 0 (i32.const 273) "\0a")
(data 0 (i32.const 272) "\0a")
(data 0 (i32.const 271) "\0a")
(data 0 (i32.const 270) "\0a")
(data 0 (i32.const 269) "\0a")
(data 0 (i32.const 268) "\0a")
(data 0 (i32.const 267) "\0a")
(data 0 (i32.const 266) "\0a")
(data 0 (i32.const 265) "\0a")
(data 0 (i32.const 264) "\0a")
(data 0 (i32.const 263) "\0a")
(data 0 (i32.const 262) "\0a")
(data 0 (i32.const 261) "\0a")
(data 0 (i32.const 260) "\0a")
(data 0 (i32.const 259) "\0a")
(data 0 (i32.const 100) "\65\76\61\6c\75\61\74\65\64\20\41\0a")
(data 0 (i32.const 112) "\65\76\61\6c\75\61\74\65\64\20\42\0a")
(data 0 (i32.const 124) "\65\76\61\6c\75\61\74\65\64\20\43\0a")
(data 0 (i32.const 136) "\69\66\20\28\28\41\20\26\26\20\42\29\20\7c\7c\20\43\29\20\7b\2e\2e\2e\7d\20\65\6c\73\65\20\7b\2e\2e\2e\7d\2c\20\77\69\74\68\20\41\3d")
(data 0 (i32.const 180) "\20\42\3d")
(data 0 (i32.const 183) "\20\43\3d")
(data 0 (i32.const 186) "\0a")
(data 0 (i32.const 187) "\69\66\2d\70\61\72\74\20\65\78\65\63\75\74\65\64\0a")
(data 0 (i32.const 204) "\65\6c\73\65\2d\70\61\72\74\20\65\78\65\63\75\74\65\64\0a")
(data 0 (i32.const 223) "\78\20\3d\20\28\41\20\26\26\20\21\42\29\20\7c\7c\20\43\2c\20\77\69\74\68\20\41\3d")
(data 0 (i32.const 250) "\20\42\3d")
(data 0 (i32.const 253) "\20\43\3d")
(data 0 (i32.const 256) "\0a")
(data 0 (i32.const 257) "\78\3d")


(memory 1)
)